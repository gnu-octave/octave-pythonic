## SPDX-License-Identifier: BSD-3-Clause
## Copyright (C) 2019 Mike Miller
##
## .gitlab-ci.yml - GitLab CI configuration for octave-pythonic

image: registry.gitlab.com/mtmiller/docker-octave

stages:
  - build
  - test
  - release

variables: &variables
  DEBIAN_FRONTEND: "noninteractive"
  DOCTEST_GIT_REPOSITORY: "https://github.com/catch22/octave-doctest.git"
  DOCTEST_GIT_TAG: "v0.7.0"
  DOCTEST_ROOT: "/tmp/doctest"
  LIBSSL_DEV: "libssl-dev"
  PYENV_GIT_REPOSITORY: "https://github.com/pyenv/pyenv.git"
  PYENV_GIT_TAG: "v1.2.14"
  PYENV_ROOT: "/tmp/pyenv"
  PYTHON_CONFIGURE_OPTS: "--enable-shared"

build:
  stage: build
  script:
    - apt-get update && apt-get install -y git
    - mkdir -p pkg
    - make O=pkg dist dist-zip
  artifacts:
    paths:
      - pkg/*.tar.gz
      - pkg/*.zip

.test with pyenv:
  stage: test
  script:
    - apt-get update && apt-get install -y blt-dev git libbz2-dev libdb-dev libffi-dev
      libgdbm-dev liblzma-dev libncursesw5-dev libreadline-dev libsqlite3-dev $LIBSSL_DEV
      tk-dev uuid-dev zlib1g-dev
    - git clone $DOCTEST_GIT_REPOSITORY $DOCTEST_ROOT
    - git -C $DOCTEST_ROOT checkout $DOCTEST_GIT_TAG
    - git clone $PYENV_GIT_REPOSITORY $PYENV_ROOT
    - git -C $PYENV_ROOT checkout $PYENV_GIT_TAG
    - export PATH=$PYENV_ROOT/bin:$PATH
    - eval "$(pyenv init -)"
    - pyenv install $PYTHON_VERSION_FULL
    - pyenv global $PYTHON_VERSION_FULL
    - mkdir -p python${PYTHON_VERSION}
    - make O=python${PYTHON_VERSION} V=1 all
    - make O=python${PYTHON_VERSION} V=1 check
    - make O=python${PYTHON_VERSION} V=1 doctest OCTAVE_PATH=/tmp/doctest/inst
  dependencies: []
  artifacts:
    paths:
      - python${PYTHON_VERSION}/*.log
    expire_in: 4 weeks

.pkg:
  stage: test
  script:
    - apt-get update && apt-get install -y python-dev python3-dev
    - octave --eval "pkg install -verbose pkg/octave-pythonic-*.tar.gz"
    - octave --eval "d = pkg ('describe', 'pythonic'); assert (d{:}.name, 'pythonic')"
    - octave --eval "pkg load pythonic; v = pyversion (); assert (v(1), '${PYTHON_VERSION}')"
  dependencies:
    - build

coverage:
  stage: test
  script:
    - apt-get update && apt-get install -y python3-dev
    - pip3 install -U gcovr
    - mkdir -p coverage
    - make O=coverage V=1 CXXFLAGS="-g -O0 --coverage" all
    - make O=coverage V=1 CXXFLAGS="-g -O0 --coverage" check
    - bash <(curl -S -s https://codecov.io/bash) -s coverage -a "-s $PWD/src -r"
    - gcovr --print-summary coverage
  variables:
    <<: *variables
    PYTHON_VERSION: "3"
  dependencies: []
  coverage: '/^lines: \d+\.\d+/'

test with python2.7:
  variables:
    <<: *variables
    PYTHON_VERSION: "2.7"
    PYTHON_VERSION_FULL: "2.7.16"
  extends: .test with pyenv

test with python3.4:
  variables:
    <<: *variables
    LIBSSL_DEV: "libssl1.0-dev"
    PYTHON_VERSION: "3.4"
    PYTHON_VERSION_FULL: "3.4.10"
  extends: .test with pyenv

test with python3.5:
  variables:
    <<: *variables
    PYTHON_VERSION: "3.5"
    PYTHON_VERSION_FULL: "3.5.7"
  extends: .test with pyenv

test with python3.6:
  variables:
    <<: *variables
    PYTHON_VERSION: "3.6"
    PYTHON_VERSION_FULL: "3.6.9"
  extends: .test with pyenv

test with python3.7:
  variables:
    <<: *variables
    PYTHON_VERSION: "3.7"
    PYTHON_VERSION_FULL: "3.7.4"
  extends: .test with pyenv

test with python3.8:
  variables:
    <<: *variables
    PYTHON_VERSION: "3.8"
    PYTHON_VERSION_FULL: "3.8.0"
  extends: .test with pyenv

test pkg with python2:
  variables:
    <<: *variables
    PYTHON_VERSION: 2
  extends: .pkg

test pkg with python3:
  variables:
    <<: *variables
    PYTHON_VERSION: 3
  extends: .pkg

release:
  stage: release
  script:
    - apt-get update && apt-get install -y curl python-minimal
    - sh build-aux/release-create.sh
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^v[0-9]+(\.[0-9]+)*/

include:
  - template: Code-Quality.gitlab-ci.yml
